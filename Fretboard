rm(list=ls(all=TRUE))


# Import our libraries
source("./libs/create_guitar_data.R")
source("./libs/highlight_notes.R")
library(shiny)
library(dplyr)

# Define the UI
ui <- fluidPage(
  titlePanel("Guitar Chord Selector"),
  sidebarLayout(
    sidebarPanel(
      textInput("selectedNote", "Enter a Note (e.g., C):", ""),
      actionButton("submitBtn", "Submit"),
      selectInput("selectEvent", "Select Major or Minor", choices = c("Major", "Minor", "Maj7", "sus2", "sus4"), selected = "Major")
    ),
    mainPanel(
      tableOutput("selectedTable")
    )
  )
)

# Create guitar chords dataframe
data <- create_guitar_data()
guitar_chords_df <- data$guitar_chords_df
note_number_values <- data$note_number_values


# Define server logic
server <- function(input, output) {
  updated_fretboard <- reactiveVal(NULL)
  
  observeEvent(input$submitBtn, {
    req(input$selectedNote)
    
    # Get the number value of the selected note
    root_note <- note_number_values$Number[note_number_values$Note == input$selectedNote]
    
    if (input$selectEvent == "Major") {
      intervals = c(0, 5, 8)
    } else if (input$selectEvent == "Minor") {
      intervals = c(0, 4, 8)
    } else if (input$selectEvent == "Maj7") {
      intervals = c(0, 5, 8, 11)
    } else if (input$selectEvent == "sus2") {
      intervals = c(0, 3, 8)
    } else if (input$selectEvent == "sus4") {
      intervals = c(0, 6, 8)
    }

    updated_fretboard <- highlight_notes(root_note, intervals, guitar_chords_df, note_number_values)
  })
  
  output$selectedTable <- renderTable({
    updated_fretboard()
  }, rownames = FALSE)
}

# Run the app
shinyApp(ui, server)


